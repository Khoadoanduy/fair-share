// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Address {
  country   String
  street    String
  apartment String?
  city      String
  state     String
  zipCode   String
}

// Schemas
model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  clerkId             String             @unique
  email               String             @unique
  customerId          String?            @unique
  cardholderId        String?            @unique
  firstName           String
  lastName            String
  username            String?            @unique
  phoneNumber         String?            @unique
  dateOfBirth         DateTime?
  address             Address?
  groups              GroupMember[]
  GroupInvitation     GroupInvitation[]
  sentInvitations     FriendInvitation[] @relation("SentInvitations")
  receivedInvitations FriendInvitation[] @relation("ReceivedInvitations")
  friends             Friend[]           @relation("UserFriends")
  friendOf            Friend[]           @relation("FriendsOf")
}

model Group {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  groupName        String
  subscriptionName String
  subscription     Subscription?     @relation(fields: [subscriptionId], references: [id])
  subscriptionId   String?           @db.ObjectId
  planName         String?
  amount           Float
  virtualCardId    String?           @unique
  members          GroupMember[]
  cycle            String?
  startDate        DateTime?
  endDate          DateTime?
  GroupInvitation  GroupInvitation[]
}

//junction table between User and Group
model GroupMember {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  group    Group  @relation(fields: [groupId], references: [id])
  groupId  String @db.ObjectId
  userRole String @default("member") //member, leader
}

model GroupInvitation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @db.ObjectId
  status    String   @default("pending") //pending, accepted, rejected
  createdAt DateTime @default(now())
}

model FriendInvitation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sender      User     @relation("SentInvitations", fields: [senderId], references: [id])
  senderId    String   @db.ObjectId
  recipient   User     @relation("ReceivedInvitations", fields: [recipientId], references: [id])
  recipientId String   @db.ObjectId
  status      String   @default("pending") // pending, accepted, declined
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Prevents duplicate friend invitation requests.
  @@unique([senderId, recipientId])
}

model Friend {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  friend    User     @relation("FriendsOf", fields: [friendId], references: [id])
  friendId  String   @db.ObjectId
  createdAt DateTime @default(now())

  // Prevents duplicate friendship records.
  @@unique([userId, friendId])
}


model Subscription {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  logo     String
  category String
  domain   String
  groups   Group[]
}